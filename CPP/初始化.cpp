#include <iostream>


class T {


};

T global;   // 先零初始化，然后默认初始化
// 默认初始化：类调用默认构造函数，数组中的元素执行默认初始化，其余不进行初始化，其值未定义。对于合成的默认构造函数，如果有类内初始值就用该值初始化相应成员（c++11），否则默认初始化数据成员


// 值初始化：对于内置类型，进行默认初始化会导致对象的值未定义,类调用默认构造函数进行初始化，如果默认初始化不是用户自定义的，则先执行零初始化后执行默认初始化，数组中的元素进行值初始化，否则进行零初始化
// 在没有提供任何初始化器的情况下初始化对象。
// int x{}; // 值初始化，将 x 初始化为 0


// 零初始化：基础类型、指针、枚举类型被初始化为0，类的基类和数据成员零初始化，数组中的元素也零初始化

// 直接初始化：使用括号（圆括号）或等号对对象进行初始化。允许执行从参数到目标类型的转换，并且可以调用相应的构造函数。
// int x(42);   使用圆括号进行直接初始化
// int y = 42;  使用等号进行直接初始化


// 拷贝初始化：拷贝构造函数

// 列表初始化：首先尝试进行匹配的构造函数（如果存在），如果无法找到匹配的构造函数，则会发生编译错误。列表初始化还可以防止窄化转换


int main() {

    T t1;   // 默认初始化
    T t2{}; // 值初始化 c++11
    T t3 = T(); // 值初始化
    T t3 = T{}; // 值初始化 c++11
    T t4(); // 函数声明

    new T;  // 默认初始化
    new T();// 值初始化
    new T{};// 值初始化c++11




    return 0;
}
